Topic: minimal changes to GDL such that a single/two player game is strongly winnable

1. the format of GDL

- only contains GDL keywords and the following types of rules.

init. 

legal :- 0+ many true/not true

next :- 0+ many true/not true, 0+ many does/not does

goal :- arbitary body

terminal :- arbitary body 

- must be grounded?


2. what are the allowed repairs?

legal :- 0+ many true/not true

next :- 0+ many true/not true, 0+ many does/not does

delete from the body of a rule 
add true/does to the body of a rule 
add a new rule
delete a rule


3. how to measure the cost?

1) weighted sum of the changes
    - single player case good
    - multiplayer case is bad, probably no solver 
2) set a limit for each of the 4 repairs, get a repair that is not exceeding the limits 



---------------------------------------------
input: arbitary valid grounded GDL with restrictions
next <- true+ | does+
legal <- true+

G = N \cup L \cup G'

allowed modifications: 
1) add/remove true/does from the body of N 
2) remove a rule from N/L 
3) add a new head to a rule of N (must remove the head first)
4) add the head of a new rule
5) add true/does from the body of new rules

claim: any set of rules with G' \cup  A_{p}^{true} |= terminal and goal(p,100) for all p \in Role has a 
repair such that the new game is weakly winnable

1) The ASP finds the minimal changes required to make a game weakly winnable within a certain number of steps
    termination and playability are ensured by additional constraints 
2) parallel computing + smaller encoding helps
3) lp2sat + kissat might work better for hard instances (we need to deal with the integrity constraints manually)

TODO:
1) termination? playability? --> easy but inefficient (co-NP, QBF/disjunctive ASP) 
2) strong winnability? --> done






repair property         complexity          language                     status

weakly winnability          NP          normal logic program             done 

strongly winnability      PSPACE           QASP/QBF                      done 

termination/playability  sigma-2-p          3QBF                         done (very slow, timeout) 
                                     2QBF/disjunctive ASP                   -



LTL (bounded depth)   sigma-2-p?         2QBF/disjunctive ASP            -

cost = 1, 1, 1, 1
X SW + O weak win:

cost = 0: bloqqer        245.81s  preprocessing + caqe 0.35s solving -> UNSAT
                                          + depqbf 2.24s solving
          QRATPRE++ BCE  76.53s  preprocessing + caqe 294.28s solving 
                                          + depqbf 118.74s solving 
cost = 1: bloqqer      9515.79s  preprocessing + caqe 114.25s solving -> x can play (2,1) even if O is controling the game
                                          + depqbf 92.51s solving  -> remove the 30th rule (1,2,o) -> next(1,2,o)
          QRATPRE++ BCE   82.62s  preprocessing + caqe 213.62s solving ->remove_body(51,pos,act,(xplayer,mark(3,2)))
                                          + depqbf 372.46s solving -> remove legal(2,2,o)


termination + playability + O weak win
cost = 0: bloqqer        351.29s  preprocessing + caqe 2.80s solving 
                                          + depqbf 1914.76s 
          QRATPRE++ BCE  217.45s  preprocessing + caqe 1755.19s solving
                                          + depqbf TIMEOUT      


X SW + termination + playability + O weak win
cost = 0: bloqqer        630.81s  preprocessing + caqe 0.58s solving -> UNSAT
                                          + depqbf TIMEOUT 
          QRATPRE++ BCE  411.17s  preprocessing + caqe 2621.37s solving
                                          + depqbf TIMEOUT      
cost = 1: bloqqer      20030.84s  preprocessing + caqe 230.55s solving -> remove body of rule 33 => true cell((1,3,x)) directly
                                          + depqbf TIMEOUT 
          QRATPRE++ BCE  148.43s      preprocessing + caqe OUT OF MEMORY
                                          + depqbf TIMEOUT



cost = 1, 1, 1, |body| + 1
X SW + O weak win:

cost = 0: bloqqer        236.46s  preprocessing + caqe 0.32s solving -> UNSAT 
                                          + depqbf 2.88s solving
          QRATPRE++ BCE  76.51s  preprocessing + caqe 288.48s solving 
                                          + depqbf 110.21s solving 
cost = 1: bloqqer      9022.76s  preprocessing + caqe 95.51s solving -> -
                                          + depqbf 72.97s solving  -> add_body(42,neg,fluent,control(xplayer))
          QRATPRE++ BCE   86.70s  preprocessing + caqe 200.67s solving -> remove_body(29,pos,fluent,cell(1,2,x))
                                          + depqbf 944.73s solving -> add_body(30,pos,act,(xplayer,noop))


X SW + termination + playability + O weak win
cost = 0: bloqqer        639.90s  preprocessing + caqe 0.61s solving -> UNSAT 
                                          + depqbf - 
          QRATPRE++ BCE  416.12s  preprocessing + caqe 2375.57s solving
                                          + depqbf TIMEOUT      
cost = 1: bloqqer      20150.75s  preprocessing + caqe 230.75s solving -> remove_body(47,pos,act,(xplayer,mark(3,1)))
                                          + depqbf TIMEOUT 
          QRATPRE++ BCE  170.12s      preprocessing + caqe OUT OF MEMORY
                                          + depqbf TIMEOUT


next(x1) :- true(x1e). <- remove body cost = 1
next(x3) :- true(x3e).
next(x2) :- true(x2e).
next(py1) :- does(y1,pos).
next(py2) :- does(y2,pos),.
terminal :- true(x1), true(py1).
terminal :- not true(x1), true(py2).
terminal :- not true(x2), true(py2).

1 add 
1 remove b 
l + 1 delte rule 
2l replace head 
add head 1 
